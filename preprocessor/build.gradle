plugins {
    id "antlr"
    id "com.diffplug.spotless" version "6.25.0"
    id "io.freefair.lombok" version "8.10"
    id "jacoco"
    id "java-library"
}

repositories {
    mavenCentral()
}

dependencies {
    // api dependencies are exported to consumers
    // implementation dependencies are not.
    api project(":common")

    testImplementation "org.junit.jupiter:junit-jupiter:5.11.1"
    testImplementation "org.mockito:mockito-core:5.14.0"

    antlr "org.antlr:antlr4:4.13.2"
    api "org.antlr:antlr4-runtime:4.13.2"
}


/*
 * Antlr configuration
 */

generateGrammarSource {
    arguments += [
        // Generate state transition graphs
        "-atn",
        // Needed to make gradle aware of grammar imports.
        "-lib", "src/main/antlr/com/lucaskjaerozhang/wikitext_parser/grammar/preprocess",
        "-package", "com.lucaskjaerozhang.wikitext_parser.grammar.preprocess",
        "-long-messages",
        "-visitor",
    ]
}

/*
 * Formatter configuration
 */

spotless {
    antlr4 {
        target "src/*/antlr/**/*.g4"
        antlr4Formatter()
    }

    // Needed to exclude antlr generated code.
    // Have to edit the file tree because of https://github.com/diffplug/spotless/issues/1163
    // This causes task dependency to not be automatically inferred, so we need to declare dependencies.
    java {
        target project.fileTree(project.rootDir) {
            include "preprocessor/**/*.java"
            exclude "preprocessor/build/generated-src/**/*.*"
        }
        removeUnusedImports()
        googleJavaFormat()
    }

    json {
        target project.fileTree(project.rootDir) {
            include "preprocessor/src/**/*.json"
            exclude "**/mapping.json"
        }
        simple().indentWithSpaces(4)
    }
}
// Manually register dependencies because we edit the project file tree
spotlessJava.dependsOn(compileJava, compileTestJava, jacocoTestReport, spotlessAntlr4, spotlessJson)

// Workaround for https://github.com/gradle/gradle/issues/19555
sourceSets.configureEach {
    java.srcDir(tasks.named(getTaskName("generate", "GrammarSource")).map { files() })
}

/*
 * Test configuration
 */

tasks.named("test") {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

check.dependsOn jacocoTestReport